Prefix:
This function initializes the Snake class by setting the initial position of the snake's body and its direction. The snake's body is represented as a list of tuples, where each tuple corresponds to a segment of the snake. The initial position is set as the head of the snake, and the initial direction is set to 'E' (East) by default. The function also includes error handling to ensure the initial position is valid.

Imports:
from typing import List, Tuple

Code:
class Snake:
    """
    Represents the snake in the game.
    """

    def __init__(self, initial_position: Tuple[int, int]):
        """
        Initializes the snake with a starting position and direction.

        :param initial_position: The initial position of the snake's head.
        :raises ValueError: If the initial position is invalid.
        """
        if not isinstance(initial_position, tuple) or len(initial_position) != 2:
            raise ValueError("Initial position must be a tuple of two integers.")
        if not all(isinstance(coord, int) and coord >= 0 for coord in initial_position):
            raise ValueError("Coordinates must be non-negative integers.")

        # Set the initial position of the snake's body
        self.body: List[Tuple[int, int]] = [initial_position]
        # Set the initial direction of the snake
        self.direction: str = 'E'  # Default direction is East

# Example usage:
# snake = Snake((10, 10))
# print(snake.body)  # Output: [(10, 10)]
# print(snake.direction)  # Output: 'E'

Tests:
```python
import unittest
from typing import Tuple
from unittest.mock import patch

# Assuming the Snake class is defined in a module named snake_module
# from snake_module import Snake

class TestSnakeInitialization(unittest.TestCase):

    def test_initial_position_valid(self):
        """Test that the snake initializes correctly with a valid initial position."""
        initial_position = (5, 5)
        snake = Snake(initial_position)
        self.assertEqual(snake.body, [initial_position])
        self.assertEqual(snake.direction, 'E')

    def test_initial_position_invalid_type(self):
        """Test that initializing with a non-tuple raises a ValueError."""
        with self.assertRaises(ValueError) as context:
            Snake([5, 5])  # List instead of tuple
        self.assertEqual(str(context.exception), "Initial position must be a tuple of two integers.")

    def test_initial_position_invalid_length(self):
        """Test that initializing with a tuple of incorrect length raises a ValueError."""
        with self.assertRaises(ValueError) as context:
            Snake((5,))  # Tuple with one element
        self.assertEqual(str(context.exception), "Initial position must be a tuple of two integers.")

    def test_initial_position_negative_coordinates(self):
        """Test that initializing with negative coordinates raises a ValueError."""
        with self.assertRaises(ValueError) as context:
            Snake((-1, 5))
        self.assertEqual(str(context.exception), "Coordinates must be non-negative integers.")

    def test_initial_position_non_integer_coordinates(self):
        """Test that initializing with non-integer coordinates raises a ValueError."""
        with self.assertRaises(ValueError) as context:
            Snake((5.5, 5))
        self.assertEqual(str(context.exception), "Coordinates must be non-negative integers.")

    def test_initial_position_zero_coordinates(self):
        """Test that initializing with zero coordinates is valid."""
        initial_position = (0, 0)
        snake = Snake(initial_position)
        self.assertEqual(snake.body, [initial_position])
        self.assertEqual(snake.direction, 'E')

if __name__ == '__main__':
    unittest.main()
```
